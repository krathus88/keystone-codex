/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MapMapRouteRouteImport } from './routes/map/$map/route'
import { Route as MapMapIndexRouteImport } from './routes/map/$map/index'
import { Route as MapMapNotesRouteImport } from './routes/map/$map/notes'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MapMapRouteRoute = MapMapRouteRouteImport.update({
  id: '/map/$map',
  path: '/map/$map',
  getParentRoute: () => rootRouteImport,
} as any)
const MapMapIndexRoute = MapMapIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MapMapRouteRoute,
} as any)
const MapMapNotesRoute = MapMapNotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => MapMapRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/map/$map': typeof MapMapRouteRouteWithChildren
  '/map/$map/notes': typeof MapMapNotesRoute
  '/map/$map/': typeof MapMapIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/map/$map/notes': typeof MapMapNotesRoute
  '/map/$map': typeof MapMapIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/map/$map': typeof MapMapRouteRouteWithChildren
  '/map/$map/notes': typeof MapMapNotesRoute
  '/map/$map/': typeof MapMapIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/map/$map' | '/map/$map/notes' | '/map/$map/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/map/$map/notes' | '/map/$map'
  id: '__root__' | '/' | '/map/$map' | '/map/$map/notes' | '/map/$map/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MapMapRouteRoute: typeof MapMapRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map/$map': {
      id: '/map/$map'
      path: '/map/$map'
      fullPath: '/map/$map'
      preLoaderRoute: typeof MapMapRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map/$map/': {
      id: '/map/$map/'
      path: '/'
      fullPath: '/map/$map/'
      preLoaderRoute: typeof MapMapIndexRouteImport
      parentRoute: typeof MapMapRouteRoute
    }
    '/map/$map/notes': {
      id: '/map/$map/notes'
      path: '/notes'
      fullPath: '/map/$map/notes'
      preLoaderRoute: typeof MapMapNotesRouteImport
      parentRoute: typeof MapMapRouteRoute
    }
  }
}

interface MapMapRouteRouteChildren {
  MapMapNotesRoute: typeof MapMapNotesRoute
  MapMapIndexRoute: typeof MapMapIndexRoute
}

const MapMapRouteRouteChildren: MapMapRouteRouteChildren = {
  MapMapNotesRoute: MapMapNotesRoute,
  MapMapIndexRoute: MapMapIndexRoute,
}

const MapMapRouteRouteWithChildren = MapMapRouteRoute._addFileChildren(
  MapMapRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MapMapRouteRoute: MapMapRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
